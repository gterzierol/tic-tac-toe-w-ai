{"version":3,"sources":["components/Helper.js","components/Square.js","components/Board.js","store/gameAction.js","services/request.js","services/config.js","components/Game.js","App.js","store/gameReducer.js","index.js"],"names":["calculateWinner","squares","lines","i","length","a","b","c","defineEmptySquares","currentBoard","emptyElements","map","item","index","push","minimax","player","availSquares","evaluation","bestMove","moves","id","move","savedBoardSpace","bestEvaluation","Infinity","Square","value","onClick","style","className","Board","square","historyRegister","historyPoint","type","payload","stepNumberRegister","stepNumber","axios","require","sendMove","post","response","data","connect","state","history","props","useState","XO","setXO","playWithWho","setPlayWithWho","winner","isDrawn","aiMove","withWho","slice","current","emptySquareIndexes","Math","floor","random","findRandomMove","dispatch","useEffect","setTimeout","jumpTo","step","Fragment","_step","destination","e","target","textContent","App","INITIAL_STATE","Array","fill","gameReducer","action","store","createStore","Reducer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7f61ab5b.chunk.js","sourcesContent":["export function calculateWinner(squares) {\r\n    const lines = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6],\r\n    ];\r\n\r\n    for (let i = 0; i < lines.length; i++) {\r\n        const [a, b, c] = lines[i];\r\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n            return squares[a];\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\nexport const findRandomMove = (squares) => {\r\n    const emptySquareIndexes = defineEmptySquares(squares);\r\n    if (emptySquareIndexes.length > 0) {\r\n        const randomMove = Math.floor(\r\n            Math.random() * emptySquareIndexes.length\r\n        );\r\n        return emptySquareIndexes[randomMove];\r\n    }\r\n    return null;\r\n};\r\n\r\nexport function defineEmptySquares(currentBoard) {\r\n    let emptyElements = [] \r\n    currentBoard\r\n        .map((item, index) => {\r\n            !item && emptyElements.push(index);\r\n            return index;\r\n        });\r\n    return emptyElements;\r\n}\r\n\r\nexport function minimax(squares, player) {\r\n    //find empty array indexes\r\n    let availSquares = defineEmptySquares(squares);\r\n    if (calculateWinner(squares) === \"X\") {\r\n        return { evaluation: -10 };\r\n    } else if (calculateWinner(squares) === \"O\") {\r\n        return { evaluation: 10 };\r\n    } else if (availSquares.length === 0) {\r\n        return { evaluation: 0 };\r\n    }\r\n\r\n    let moves = [];\r\n    for (let i = 0; i < availSquares.length; i++) {\r\n        \r\n        let id = availSquares[i];\r\n        let move = {};\r\n        move.id = id;\r\n        let savedBoardSpace = squares[id];\r\n        squares[id] = player;\r\n        if (player === \"O\") {\r\n            move.evaluation = minimax(squares, \"X\").evaluation;\r\n        } else {\r\n            move.evaluation = minimax(squares, \"O\").evaluation;\r\n        }\r\n        squares[id] = savedBoardSpace;\r\n        moves.push(move);\r\n    }\r\n\r\n    let bestMove;\r\n    if (player === \"O\") {\r\n        let bestEvaluation = -Infinity;\r\n        for (let i = 0; i < moves.length; i++) {\r\n            if (moves[i].evaluation > bestEvaluation) {\r\n                bestEvaluation = moves[i].evaluation;\r\n                bestMove = moves[i];\r\n            }\r\n        }\r\n    } else {\r\n        let bestEvaluation = +Infinity;\r\n        for (let i = 0; i < moves.length; i++) {\r\n            if (moves[i].evaluation < bestEvaluation) {\r\n                bestEvaluation = moves[i].evaluation;\r\n\r\n                bestMove = moves[i];\r\n            }\r\n        }\r\n    }\r\n    return bestMove;\r\n}\r\n","import React from 'react'\r\n\r\n\r\nconst Square = ({value, onClick}) => {\r\n    const style = value ? `squares ${value}`: `squares`\r\n\r\n    return(\r\n        <button onClick={onClick} className={style}>\r\n            {value}\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default Square","import React from \"react\";\r\nimport Square from \"./Square\";\r\n\r\nconst Board = ({ squares, onClick }) => {\r\n    return (\r\n        <div className='board-container'>\r\n            <div className=\"board\">\r\n                {squares.map((square, i) => (\r\n                    <Square\r\n                        key={i}\r\n                        value={square}\r\n                        onClick={() => onClick(i)}\r\n                    />\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Board;\r\n","export const historyRegister = (historyPoint, squares) => {\r\n    return{\r\n        type:'ADD_STEP',\r\n        payload:{\r\n            historyPoint,\r\n            squares\r\n        }\r\n    }\r\n}\r\n\r\nexport const stepNumberRegister = (stepNumber) => {\r\n    return{\r\n        type:'ADD_STEP_NUMBER',\r\n        payload:{\r\n            stepNumber\r\n        }\r\n    }\r\n}\r\nexport const goToStep = (current) => {\r\n    return{\r\n        type: 'GO_TO_STEP',\r\n        payload:{\r\n            current\r\n        }\r\n    }\r\n}\r\nexport const restartGame = () => {\r\n    return{\r\n        type:'RESTART_GAME'\r\n    }\r\n}\r\n","import { URL } from './config' \r\nconst axios = require('axios');\r\n\r\nexport const sendMove =  async (move) => {\r\n    try {\r\n        const response = await axios.post(URL, {\r\n            \"action\":move\r\n        });\r\n        return response.data     \r\n    } catch (error) {\r\n        return error\r\n    }\r\n}","export const URL = 'http://140.82.59.206/gameLogger.php'","import React, { useEffect, useState } from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport { calculateWinner,defineEmptySquares, minimax, findRandomMove } from \"./Helper\";\r\nimport Board from \"./Board\";\r\nimport {historyRegister, restartGame, stepNumberRegister} from '../store/gameAction';\r\nimport { sendMove } from '../services/request';\r\n\r\n\r\nlet squares = [];\r\n\r\nconst Game = (props) => {\r\n    const [XO, setXO] = useState(\"X\");\r\n    const [playWithWho, setPlayWithWho] = useState('')\r\n\r\n    //=> Checking winner with current state\r\n    let winner = calculateWinner(props.history[props.stepNumber]);\r\n    //=> Checking the game is drawn or not with current state\r\n    let isDrawn = (defineEmptySquares(props.history[props.stepNumber]).length === 0)\r\n\r\n    //=> AI Picker\r\n    const aiMove = (withWho) => {\r\n        if (XO === \"X\") return;\r\n\r\n        if (defineEmptySquares(props.history[props.stepNumber]).length !== 0) {\r\n            const historyPoint = props.history.slice(0, props.stepNumber + 1);\r\n            const current = historyPoint[props.stepNumber];\r\n            squares = [...current];\r\n            \r\n            let index = withWho === 'Easy' ? findRandomMove(squares) :minimax(squares, XO).id ;\r\n            if (squares[index] || winner) return;\r\n            \r\n            squares[index] = XO;\r\n            props.dispatch(historyRegister([...historyPoint], squares));\r\n            props.dispatch(stepNumberRegister(historyPoint.length));\r\n            sendMove(`Move Triggered by ${XO} index of square ${XO}`);\r\n            setXO(\"X\");\r\n        }\r\n    };\r\n\r\n    const handleClick = (i) => {\r\n        const historyPoint = props.history.slice(0, props.stepNumber + 1);\r\n        const current = historyPoint[props.stepNumber];\r\n        squares = [...current];\r\n        \r\n        if (squares[i] || winner) return;\r\n\r\n        squares[i] = XO;\r\n        props.dispatch(historyRegister([...historyPoint], squares))\r\n        props.dispatch(stepNumberRegister(historyPoint.length));\r\n        sendMove(`Move Triggered by ${XO} index of square ${XO}`);\r\n        setXO(XO === \"O\" ? \"X\" : \"O\");\r\n    };\r\n\r\n    //=>  aiMove func depends on XO's state changes. When XO state changed,  that means when human or computer play their turn, XO statement changes for the determine to who is the next Player\r\n    useEffect(() => {\r\n        setTimeout(() =>  {\r\n            if(playWithWho === '2 Player') return\r\n                aiMove(playWithWho)\r\n            }, 300);\r\n    }, [XO]);\r\n\r\n    //=> when triggered this func, the stepNumber state is changes. This change is define which game state will  you return.\r\n    const jumpTo = (step) => {\r\n        if(step === 0){\r\n            props.dispatch(restartGame())\r\n            props.dispatch(stepNumberRegister(step))\r\n        }else{\r\n            const historyPoint = props.history.slice(0, step + 1)\r\n            const current = historyPoint[step];\r\n            props.dispatch(stepNumberRegister(step))\r\n            props.dispatch(historyRegister([...historyPoint], current))\r\n            setXO(step % 2 === 0 ? \"X\" : \"O\");\r\n        }\r\n    };\r\n\r\n    //=> renderMoves func creates step buttons\r\n    const renderMoves = () => props.history.map((_step, move) => {\r\n        const destination = move ? `go to move  #${move}` : \"go to start\";\r\n        \r\n            if(move === 0){\r\n                return(\r\n                    <li key={move}>\r\n                        <button onClick={() => jumpTo(move)}>{destination}</button>\r\n                    </li>\r\n                )\r\n            }else{\r\n                return(\r\n                    <li key={move}>\r\n                        <button onClick={() => jumpTo(move-1)}>{destination}</button>\r\n                    </li>\r\n                )\r\n            }\r\n        \r\n    });\r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className= \"game-container\">\r\n                <div className=\"title\">\r\n                    <h1>React Tic Tac Toe Game</h1>\r\n                </div>\r\n                <div className='container'>\r\n                    {\r\n                        !playWithWho ? \r\n                        (<div className='choose'>\r\n                            <span><button className='button' onClick={(e)=> {setPlayWithWho(e.target.textContent)}}>Easy</button></span>\r\n                            <span><button className='button' onClick={(e)=> {setPlayWithWho(e.target.textContent)}}>Unbeatable</button></span>\r\n                            <span><button className='button' onClick={(e)=> {setPlayWithWho(e.target.textContent)}}>2 Player</button></span>\r\n                        </div>)\r\n                        :\r\n                        (<div>\r\n                        {\r\n                            (winner || isDrawn) && \r\n                            (<div className='endgame-container'>\r\n                                <div className='endgame'>{(isDrawn && 'Drawn') || (winner && \"Winneerrrr! =>\" + winner)}</div>\r\n                                <button className='endgame restart' onClick={()=> {jumpTo(0);}}>Restart Game</button>\r\n                            </div>)\r\n                        }\r\n                            <div className={(winner || isDrawn) ? \"container opacity\" : \"container\"}>\r\n                                <div className={(winner || isDrawn) ? \"player active\" : \"player\"}>\r\n                                    <h3>\r\n                                        {isDrawn ? 'DRAWN' : winner ? \"Winner => \" + winner : \"Next Player: \" + XO}\r\n                                    </h3>\r\n                                </div>\r\n                                <Board squares={props.history[props.stepNumber]} onClick={handleClick}/>\r\n                                <div className=\"info-wrapper\">\r\n                                    <div>\r\n                                        <h3>History</h3>\r\n                                        {props.history && renderMoves()}\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className={(winner || isDrawn) ? 'win': ''}/>\r\n                        </div>)\r\n                    }\r\n                </div>\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return{\r\n        history: state.history,\r\n        stepNumber: state.stepNumber\r\n    }\r\n}\r\nexport default connect(mapStateToProps)(Game);\r\n","import './App.css';\nimport Game from './components/Game'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game/>\n    </div>\n  );\n}\n\nexport default App;\n","import { goToStep } from \"./gameAction\"\r\n\r\nconst INITIAL_STATE = {\r\n    history:[Array(9).fill(null)],\r\n    stepNumber:0\r\n}\r\n\r\nconst gameReducer = (state= INITIAL_STATE, action ) => {\r\n    switch(action.type){\r\n        case 'ADD_STEP':\r\n            return {\r\n                ...state,\r\n                history: [...action.payload.historyPoint, action.payload.squares]}\r\n        case 'ADD_STEP_NUMBER':\r\n            return {\r\n                ...state,\r\n                stepNumber: action.payload.stepNumber\r\n            }\r\n        case 'GO_TO_STEP':\r\n            return {\r\n                ...state,\r\n                history: [...INITIAL_STATE.history, action.payload.current]\r\n            }\r\n        case 'RESTART_GAME':\r\n            return state = INITIAL_STATE\r\n        default:\r\n            return state\r\n        }   \r\n}\r\nexport default gameReducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport {createStore} from 'redux';\nimport {Provider} from 'react-redux'\nimport Reducer from './store/gameReducer';\n\nconst store = createStore(Reducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}